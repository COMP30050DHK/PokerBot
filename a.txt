package poker;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import twitter4j.FilterQuery;
import twitter4j.StallWarning;
import twitter4j.Status;
import twitter4j.StatusDeletionNotice;
import twitter4j.StatusListener;
import twitter4j.StatusUpdate;
import twitter4j.Twitter;
import twitter4j.TwitterException;
import twitter4j.TwitterFactory;
import twitter4j.TwitterStream;
import twitter4j.TwitterStreamFactory;
import twitter4j.UserMentionEntity;
import twitter4j.conf.Configuration;
import twitter4j.conf.ConfigurationBuilder;

public class HandOfPoker {

	protected int lastBet = 0;
	int state = 0;
	protected int pot = 0;
	protected boolean open = false;
	private ArrayList<PokerPlayer> pokerPlayers = new ArrayList<PokerPlayer>();
	private ArrayList<PokerPlayer> playersIn = new ArrayList<PokerPlayer>();
	private boolean cleanRound = false;
	private boolean roundOver = false;
	private int clean = 0;
	private int needToCall = 0;
	private int cantOpen = 0;
	PokerPlayer winner;
	DeckOfCards deck;
	public static String userName = "";
	public static long id = 0;
	public static String listings = ("@");
	public static List<Status> mentions;
    private final static String CONSUMER_KEY = "iVuE7LBUqmSKkxVctRlHdLnoT";
    private final static String CONSUMER_KEY_SECRET = "SXXcBo8NpHb2nyTu1dFmQ0PYxQv9cMqtj6xs4HkyXVGaJMq7FD";
	Scanner scanner;


	public HandOfPoker(DeckOfCards d, ArrayList<PokerPlayer> players, String name, long statusID) {
		
		deck = d;
		pokerPlayers.addAll(players);
		playersIn.addAll(players);
		scanner = new Scanner(System.in);
		userName = name;
		id = statusID;
		printPlayerChips();
		
	}
	
	public void executeHandOfPoker(){
		newHandCycle();
		 discardCycle();
		//ready to start the betting cycle
		//betting stops whenever clean round is true
		//becomes true when there has been a full rotation of calling/seeing
		cleanRound = false;
		
		while(cleanRound!=true){
			bettingRound();
			if(roundOver){
				return;
			}
		}
		
		showCards();
		returnCards();
		
		if(!playersIn.isEmpty()){
			
			winner = playersIn.get(decideWinner());
			winner.setNumberOfChips(pot);
			System.out.println("\n" + winner.name + " won " + pot + " chips");
			playersIn.clear();
			playersIn.addAll(pokerPlayers);
		}
		
		printPlayerChips();
		
		return;
		
	}
	
	private void returnCards(){
		for (int i=0;i<pokerPlayers.size();i++){
			pokerPlayers.get(i).returnCards();
		}
	}

	public void printPlayerChips() {
		
		listings+=userName; 
		listings+=(" CHIP LISTINGS:\n");
		
		for (int i = 0; i<playersIn.size(); i++) {
			listings+=("> " + playersIn.get(i).name + ": " + playersIn.get(i).numberOfChips + " chip(s)\n");
		}
		
	}
	
	//dealing all players a new hand
	public void newHandCycle(){
		ConfigurationBuilder builder = new ConfigurationBuilder();
		 builder.setOAuthConsumerKey(CONSUMER_KEY);
		 builder.setOAuthConsumerSecret(CONSUMER_KEY_SECRET);
		 Configuration configuration = builder.build();
		 TwitterFactory factory = new TwitterFactory(configuration);
		 Twitter twitter = factory.getInstance();
		 
		listings+="\n>> DEALING NEW CARDS\n";
		
		for (int i = 0; i < playersIn.size(); i++) {
			//won't owe anything at start of new round
			playersIn.get(i).amountToCall=0;
			playersIn.get(i).newHand();
			if(playersIn.get(i).isHuman()){
				listings+=(playersIn.get(i).hand.toString());			
			}
		}
		StatusUpdate replyStatus = new StatusUpdate(listings);
		 replyStatus.setInReplyToStatusId(id);
	    try {
			twitter.updateStatus(replyStatus);	
			
		} catch (TwitterException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}  	
	    
	}
	
	//asking all players if they want to discard
	public void discardCycle(){
		ConfigurationBuilder builder = new ConfigurationBuilder();
		 builder.setOAuthConsumerKey(CONSUMER_KEY);
		 builder.setOAuthConsumerSecret(CONSUMER_KEY_SECRET);
		 Configuration configuration = builder.build();
		 TwitterFactory factory = new TwitterFactory(configuration);
		 Twitter twitter = factory.getInstance();
		listings="@"+userName;
		listings+=">> Would you like to swap any cards? ('n' or numbers you want to discard from 0-4 e.g 03)";
	// 	String input = scanner.next();
		
		StatusUpdate replyStatus = new StatusUpdate(listings);
		 replyStatus.setInReplyToStatusId(id);
	    try {
			twitter.updateStatus(replyStatus);	
			
		} catch (TwitterException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}  	
		
	    TwitterStream twitterStream = new TwitterStreamFactory(configuration).getInstance();
 	    
	    StatusListener listener = new StatusListener() {
	    
	    	boolean found = false;
 	    	 
 	        @Override
 	        public void onStatus(Status status) {
 	                //here you do whatever you want with the tweet
 	        	String tweet = status.getText();
	    	    String userName = status.getUser().getScreenName();
		       	String discardString = tweet.substring(14);
 	       	
 	       	
 	       	for (int i = 0; i<playersIn.size(); i++) {

 				if(playersIn.get(i).isHuman()){
 					boolean validInput = false;
 					while(!validInput){
 						validInput = ((HumanPokerPlayer) playersIn.get(i)).discard(discardString);
 						if(!validInput){
 							 StatusUpdate replyStatus = new StatusUpdate("@"+userName+" Invalid reply! Say 'n' to swap no cards or the position of the cards (up to 3 cards) you wish to swap (eg 034).");
 		    	       		 replyStatus.setInReplyToStatusId(status.getId());
 		    	     	    try {
 						//   **NEEDS IMPLEMENTATION FOR INVALID INPUT***		
 		    	     	    	twitter.updateStatus(replyStatus);	
 		   					
 		   				} catch (TwitterException e) {
 		   					// TODO Auto-generated catch block
 		   					e.printStackTrace();
 		   					}      						
 		    	     	}
 					}
 				} else {
 					((AutomatedPokerPlayer) playersIn.get(i)).discard();
 				}
 			} 	        	
 	       
 	        }
 	        
 	        @Override
 	        public void onException(Exception ex) {
 	            ex.printStackTrace();
 	        }

 	        @Override
 	        public void onDeletionNotice(StatusDeletionNotice arg0) {
 	                  // TODO Auto-generated method stub

 	        }

 	        @Override
 	        public void onScrubGeo(long arg0, long arg1) {

 	        }

 	        @Override
 	        public void onStallWarning(StallWarning arg0) {
 	            // TODO Auto-generated method stub
 	            System.out.println(arg0);
 	        }

 	        @Override
 	        public void onTrackLimitationNotice(int arg0) {
 	            // TODO Auto-generated method stub
 	            System.out.println(arg0);
 	        }

 	    };

 	    twitterStream.addListener(listener);
 	    FilterQuery filterQuery = new FilterQuery();
 	    filterQuery.track("@DHK_pokerBot");
 	    twitterStream.filter(filterQuery);
	}

	public void bettingRound() {
		
		
		//going to cycle through all players for a round of betting
		for (int i = 0; i<playersIn.size(); i++) {
			
			if(playersIn.size()==1){
				cleanRound=true;
				return;
			}
			
			//means everyone has called in this round and betting will stop
			if(clean >= playersIn.size()){
				cleanRound = true;
				return;
			}
			
			System.out.println(playersIn.get(i).getName() + " has " + playersIn.get(i).getNumberOfChips() + " chips");
			
			//if the betting is already open or if player can open betting
			if(playersIn.get(i).canOpenBetting() || open){
				
				//all their remaining chips are invested in this round
				if(playersIn.get(i).getNumberOfChips()<=0){
					clean++;
				}
				
				//still have chips left so have a choice to bet/fold/see
				else if(playersIn.get(i).getNumberOfChips()!=0){
					
					//stores value that current player would need to call with
					needToCall = playersIn.get(i).amountToCall;
					
					//if their call value is more than their chips
					if(needToCall>=playersIn.get(i).numberOfChips){
						//call value will become all of their chips (all in)
						needToCall = playersIn.get(i).numberOfChips;
						System.out.println(playersIn.get(i).getName()+" see/call to go all in with = " + needToCall + "chips");
					}
					
					//if they have more chips than call value
					else{
						//if betting has been opened
						if(open){
							System.out.println(playersIn.get(i).getName()+" call/see amount = " + needToCall + " chip(s)");
						}
						if(!open){
							System.out.println("Betting hasn't been opened yet.");
						}
					}
						
					//state will become either -1,0,1
					
					if(playersIn.get(i).isHuman()){
						boolean validInput = false;
						System.out.println("You have: " + playersIn.get(i).numberOfChips + " chips");
						if (!open){
							System.out.print(">> Would you like to raise or fold: ");
						} else {
							System.out.print(">> Would you like to raise, see or fold: ");
						}
						while (!validInput){
							state = ((HumanPokerPlayer) playersIn.get(i)).getBet(scanner.nextLine(), playersIn.get(i).amountToCall, open);
							if (state==-2){
								System.out.println("Invalid Input! ");
								System.out.println("You have: " + playersIn.get(i).numberOfChips + " chips");
								if (!open){
									System.out.print(">> Would you like to raise or fold: ");
								} else {
									System.out.print(">> Would you like to raise, see or fold: ");
								}
							} else {
								validInput = true;
							}
						}
					} else {
						state = ((AutomatedPokerPlayer) playersIn.get(i)).getBet(playersIn.get(i).amountToCall, open);
					}
					//player wants to raise
					if(state==1){
						//betting becomes open
						open = true;
						//pot is increased by their call value + 1 (they raised)
						pot+=needToCall+1;
					
						//increasing all players call value except their own
						for (int j = 0; j < playersIn.size(); j++) {
							if(j!=i){
								playersIn.get(j).amountToCall++;
							}
						}
					
						//they now don't need to call anything
						playersIn.get(i).amountToCall = 0;
						System.out.println(playersIn.get(i).getName() + " has raised");
						clean = 0;
					}
					
					//player has called
					else if(state==0){
						pot+=needToCall;
						//now don't need to call anything
						playersIn.get(i).amountToCall = 0;
						System.out.println(playersIn.get(i).getName() + " has called");
						clean++;
					}
					
					//player has folded
					else if(state==-1){
						playersIn.get(i).amountToCall = 0;
						System.out.println(playersIn.get(i).getName() + " has folded");
						playersIn.remove(i);
						i--;
						clean++;
					}
				}
			}
			
			
			//if the player can't open betting and it isn't open yet
			else if(!playersIn.get(i).canOpenBetting() && !open){
				
				System.out.println(playersIn.get(i).getName()+" cant open betting!");
				//counts amount of players who can't open
				cantOpen++;
				
				//if nobody is able to open
				if(cantOpen>=playersIn.size()){
					System.out.println("Nobody wants to open, round over!");
					roundOver = true;
				}
				
			}
			
		}
	
	}

	public void showCards() {
		
		System.out.println("\nEND OF ROUND\n");
		
		for (int i = 0; i<playersIn.size(); i++) {
			System.out.println(playersIn.get(i).name + ": " + playersIn.get(i).hand.toString());
		}
	}

	public int decideWinner() {
		
		int max = 0;
		int winner=0;
		
		for (int i = 0; i < playersIn.size(); i++) {
			if(playersIn.get(i).hand.getGameValue()>max){
				max = playersIn.get(i).hand.getGameValue();
				winner = i;
			}
		}
		
		return winner;
			
	}
}